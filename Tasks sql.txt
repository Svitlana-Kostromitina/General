--1. Добавить новый учебный курс в таблице Course.

     Select *
       From Course c
         Go

Insert into Course (CourseId, Code, Title, Description, Amount, Status, CreateDate)
     Select '500', 'TS500', 'Test', 'Testing', '1000', 'A', CURRENT_TIMESTAMP
         Go
	
     Select *
       From Course c
      Where c.Title = 'Test'
         Go

--2. Добавить описание новосозданного курса (п.1.) в таблице CourseContent (минимум 3 записи). 
--Предварительно проанализируйте таблицы, посмотрите как на текущих данных выполнено наполнение таблиц.

     Select *
       From Course c
         Go

     Select *
       From CourseContent t
         Go

Insert into CourseContent (CourseId, Chapter, ContentType, Title, Description)
     Select '500', '1', 'HW', 'Testing_1', ''
  Union All
     Select '500', '2', 'HW', 'Testing_2', ''
  Union All
     Select '500', '3', 'HW', 'Testing_3', ''
	 Go

     Select *
       From Course c, CourseContent t
      Where c.CourseId = t.CourseId
	    and t.Title in ('Testing_1', 'Testing_2', 'Testing_3')
         Go

--3. Добавить новую учебную группу в таблице UserGroup (проанализировать связи таблиц Course и UserGroup. 
--Используйте скрипт 2-Create_Tables.sql и диаграмму БД для изучения связей).

     Select *
       From Course c
         Go

     Select *
       From UserGroup g
         Go

Insert into UserGroup (CourseId, Name, CreateDate, UpdateDate, Status)
     Select '500', 'TestTest', '2021-10-19', CURRENT_TIMESTAMP, 'A' 
	 Go

     Select *
       From UserGroup u, Course c
      Where c.CourseId = u.CourseId
	    and u.Name = 'TestTest'
	 Go

--4. Добавить 2 новых пользователя в таблицу UserData со статусом 'D' и параметром 0 и 1.

      Select *
        From UserData u
	  Go

 Insert into UserData (Login, Password, FirstName, MiddleName, LastName, CreateDate, UpdateDate, Status, Parameter)
      Select 'Student1', '1111111', 'Александр', 'Васильевич', 'Шариков', CURRENT_TIMESTAMP, '2021-01-01', 'D', 0
   Union All
      Select 'Student2', '2222222', 'Светлана', 'Юрьевна', 'Светлая', CURRENT_TIMESTAMP, '2021-01-01', 'D', 1
          Go 

      Select *
        From UserData u
       Where u.Login in ('Student1', 'Student2')
          Go

--5. Добавить еще 2 пользователя в таблицу UserData с другим допустимым статусом и параметром 0 и 1.

      Select *
        From UserData u
	  Go

 Insert into UserData (Login, Password, FirstName, MiddleName, LastName, CreateDate, UpdateDate, Status, Parameter)
      Select 'Student3', '3333333', 'Никита', 'Александрович', 'Петров', CURRENT_TIMESTAMP, '2021-01-01', 'A', 0
	   Union All
      Select 'Student4', '4444444', 'Юлия', 'Олеговна', 'Бондаренко', CURRENT_TIMESTAMP, '2021-01-01', 'A', 1
          go 

      Select *
        From UserData u
       Where u.Login in ('Student3', 'Student4')
         Go


--*6. Изменить статус  на 'активный' для своих новосозданных пользователей у которых статус 'D'. 
--Изменить параметр на 1 для своих новосозданных пользователей у которых параметр 0.
--Также изменить дату с поле  UpdateDate через функцию CURRENT_TIMESTAMP только для своих пользователей 
--у которых производились изменения статуса и параметра.
--Постараться этот пункт сделать одним запросом.*/

       Select *
         From UserData u
   	Where u.Login in ('Student1', 'Student2', 'Student3', 'Student4')
 	      and (u.Status = 'D' or u.Parameter = '0
	   Go

       update UserData 
          set Status = 'A', Parameter = 1, UpdateDate = CURRENT_TIMESTAMP
        where Parameter = '0' and Login in ('Student1', 'Student2', 'Student3', 'Student4')
			  or Status = 'D' and Login in ('Student1', 'Student2', 'Student3', 'Student4')
	   Go

       Select *
         From UserData u
	Where u.Login in ('Student1', 'Student2', 'Student3', 'Student4')
	   Go

--*7. Связать своих 4-х новых пользователей с группой (связь данных с таблиц UserGroup и UserData через таблицу UserGroupLink).
--Для определения идентификатора пользователя, постарайтесь научиться использовать функцию getUserId.
--Пример ее использования есть в скрипте 3 - Insert_Tables.sql при вставке в таблицу "[UserRoleLink] inserts".
--Функция, это универсальный механизм, вам не придется вручную прописывать идентификатор пользователя, который у вас и у меня может отличаться.*/

        Select *
  	  From UserGroupLink l
 	    Go

        Select *
          From UserGroup g
            Go
 
        Select *
          From UserData u
            Go

   Insert into UserGroupLink
        select (Select g.UserGroupId
          From UserGroup g
         Where g.Name = 'TestTest'), (Select * from getUserId ('Student1'))
     union all 
        select (Select g.UserGroupId
          From UserGroup g
         Where g.Name = 'TestTest'), (Select * from getUserId ('Student2'))
     union all 
        select (Select g.UserGroupId
          From UserGroup g
         Where g.Name = 'TestTest'), (Select * from getUserId ('Student3'))
     union all 
        select (Select g.UserGroupId
          From UserGroup g
         Where g.Name = 'TestTest'), (Select * from getUserId ('Student4'))
            Go

        select * 
          From UserData u, UserGroupLink l, UserGroup g
         Where u.UserDataId = l.UserDataId
               and g.UserGroupId = l.UserGroupId
               and u.Login In ('Student1', 'Student2', 'Student3', 'Student4')
            Go

        Select *
          From UserData u
         Where u.Login in ('Student1', 'Student2', 'Student3', 'Student4')
            Go

--*8. Выбрать всех пользователей из СВОЕЙ ГРУППЫ и своего КУРСА, отсортировав по имени пользователя (FirstName). Вывести только эти колонки: Login, FirstName, MiddleName, LastName, [Name] as GroupName (колонка с таблицы UserGroup), Title (таблица Course).
--Ожидаю получить SELECT в секции FROM которого будет написано 4 таблицы (UserData, UserGroupLink, UserGroup, Course), далее в условии WHERE и AND необходимо связать эти таблицы по корректным идентификаторам таблиц.
--Так же написать дополнительное условие фильтрации (AND) по названию новой группы, что бы вывести только своих 4-х студентов со своей группы.
--Сортировка, это дополнительное условие в самом конце выборки: ORDER BY FirstName.*/

/*Вариант1*/ 
   
   Select u.Login, u.FirstName, u.MiddleName, u.LastName, g.[Name] as GroupName, c.Title
     From UserData u INNER JOIN UserGroupLink l ON u.UserDataId = l.UserDataId
	             INNER JOIN UserGroup g ON g.UserGroupId = l.UserGroupId
		     INNER JOIN Course c  ON c.CourseId = g.CourseId
    Where  g.[Name] = 'TestTest' AND c.Title = 'Test'
 Order by u.FirstName 
       Go

/*Вариант2*/

    Select u.Login, u.FirstName, u.MiddleName, u.LastName, g.[Name] as GroupName, c.Title
      From UserData u, UserGroupLink l, UserGroup g, Course c
     Where u.UserDataId = l.UserDataId
	   AND g.UserGroupId = l.UserGroupId
	   AND c.CourseId = g.CourseId
           AND g.[Name] = 'TestTest' AND c.Title = 'Test'
  Order by u.FirstName
        Go

/*9. Удалить своих пользователей с БД, созданную группу и описатели курса и курс. Нужно будет проделать работу в  обратном порядке. Просто так пользователя удалить не получится, потому что он будет связан с новосозданной группой.
Выполняйте удаление по Login с таблицы UserData. Это поле уникально и удалится только тот пользователь, которого вы напишете в условии WHERE Login  = 'логин пользователя' или через IN ('','','') указав перечень логинов пользователей. Так же можно использовать функцию, на ваше усмотрение.*/

 Select *
   From UserGroupLink 
  Where UserDataId in (Select u.UserDataId 
                         From UserData u
		        Where u.Login in ('Student1', 'Student2', 'Student3', 'Student4'))

 Delete
  From UserGroupLink 
 Where UserDataId in (Select u.UserDataId 
                      From UserData u
		      Where u.Login in ('Student1', 'Student2', 'Student3', 'Student4'))
-------------------------------
    Select *
      From UserData u
     Where u.Login in ('Student1', 'Student2', 'Student3', 'Student4')
        Go

    Delete 
      From UserData 
     Where Login in ('Student1', 'Student2', 'Student3', 'Student4')
	Go
-------------------------------
    Select *
      From  UserGroup u 
     Where u.Name = 'TestTest' AND u.CourseId = '500'
	Go

    Delete
      From UserGroup
     Where Name = 'TestTest' AND CourseId = '500'
	Go
-------------------------------
    Select *
      From CourseContent t
     Where t.Title in ('Testing_1', 'Testing_2', 'Testing_3') AND t.CourseId = '500'
        Go

    Delete
      From CourseContent 
     Where Title in ('Testing_1', 'Testing_2', 'Testing_3') AND CourseId = '500'
        Go
-------------------------------
    Select *
      From Course c
     Where c.CourseId = 500
        Go

    Delete
      From Course 
     Where CourseId = 500
	Go

/*Практика написания запросов.
Под каждым заданием написать SELECT с условием.*/


--1. Найти документы в таблице Payment, где сумма (Amount)  больше равна 26024.92.

  Select *
    From Payment p
   Where p.Amount >= 26024.92 
      Go

--2. Найти документы в таблице Payment, где назначение платежа (TXT) имеет слово 'рахунок' в любом сегменте строки,
-- И валюта (Currency) документов может быть '978', '980'.

 Select *
   From Payment p
  Where p.TXT LIKE '%рахунок%'
        and p.Currency in ('978', '980')
     Go

--3. Найти документы в таблице Payment, где дата документа между 2010-02-11 и 2011-05-22, и валюта документов НЕ равна 980.

 Select *
   From Payment p
  Where p.Data_doc BETWEEN '2010-02-11' and '2011-05-22'
        and p.Currency != '980'
     Go

--4. Найти документы в таблице Payment, где Дебет счета (DebAcc) может иметь  такие счета '260070001','260088791','260006443',
-- Статус '+' и валюта НЕ 980.

 Select *
   From Payment p
  Where p.DebAcc in ('260070001', '260088791', '260006443')
        and p.[Status] = '+'
		and p.Currency <> '980'
     Go

--5. Найти документы в таблице Payment, где Дебет счета (DebAcc) может иметь  такие счета '260070001','260088791','260006443'.
-- При этом вывести сумму документа Amount умноженную на 3 и от этой суммы отнять 1000.

 Select p.Payment_Id, p.Data_doc, p.DebAcc, p.CredAcc, p.Currency, p.Amount, p.AmountUAH, p.Status, p.TXT,  p.Amount *3 -1000 as Cумма
   From Payment p
  Where p.DebAcc in ('260070001','260088791','260006443')
     Go 

 Select p.Payment_Id, p.Data_doc, p.DebAcc, p.CredAcc, p.Currency, p.Amount *3 -1000 as Amount, p.AmountUAH, p.Status, p.TXT
   From Payment p
  Where p.DebAcc in ('260070001','260088791','260006443')
     Go 

--*6. Вывести счета с таблицы Account, где "(" Status равен 'O' И дата открытия OpenDate равна 2016-01-21 ")"
ИЛИ дата закрытия CloseDate явяется НЕ NULL. Здесь обратите внимание на скобки в условии.*/

  Select *
    From Account a
   Where a.Status = 'O' and OpenDate = '2016-01-21'
         or a.CloseDate is not null
      Go

--*7. Вывести счета с таблицы Account, где Status равен 'O' И "(" дата открытия OpenDate равна 2016-01-21 ИЛИ дата
--закрытия CloseDate явяется НЕ NULL ")". 
--Здесь обратите внимание на скобки в условии.*/

  Select *
    From Account a
   Where a.Status = 'O'
         and (OpenDate = '2016-01-21'  or  a.CloseDate is not null)      
     Go

--8. Вывести пользователей с таблицы Customer и Salary, у которых ДР '1977-09-26', 
--получал Бонус и дата ЗП между '2019-03-31' и '2019-09-30'.

  Select * 
    From Customer c
	  Go

  Select * 
    From Salary s
	  Go

  Select * 
    From Customer c INNER JOIN Salary s ON c.Cust_Id = s.Cust_Id
   Where c.Birthday = '1977-09-26' AND s.Bonus is not null
         AND s.Date BETWEEN '2019-03-31' and '2019-09-30'
      Go

--*9. Вывести информацию о пользователях и его счетах с таблиц Customer и Account, где:
--	- Клиенты нерезиденты
--	- Счет начинается на 2650
--	  вторая часть выборки
--	- Клиенты нерезиденты
--	- Код валюты 980.
--Подсказка: между запросами использовать UNION или UNION ALL, но что бы выводимые строки не дублировались 
--(попрактикуйте с этим оператором соединения)
--Поля для вывода такие: CustomerLogin, NameUser, Resident, Country, Gender, Account, Currency, [Status], OpenDate
--Отсортировать по дате открытия счета в обратном порядке.

  Select c.CustomerLogin, c.NameUser, c.Resident, c.Country, c.Gender, a.Account, a.Currency, a.[Status], a.OpenDate
    From Customer c INNER JOIN Account a ON c.Cust_Id = a.Cust_Id
   Where c.Resident = 'N' and a.Account LIKE ('2650%')
   Union 
  Select c.CustomerLogin, c.NameUser, c.Resident, c.Country, c.Gender, a.Account, a.Currency, a.[Status], a.OpenDate
    From Customer c INNER JOIN Account a ON c.Cust_Id = a.Cust_Id
   Where c.Resident = 'N' and a.Currency = '980'
Order by a.OpenDate desc
      Go

--10. Выбрать тех клиентов, у которых была сумма ЗП но без бонусов и при этом они ниразу не были оштрафованы, 
--и статус клиента Открыт.

  Select *
    From Customer c

  Select * 
    From Salary s

  Select *
    From Penalty p

  Select *
    From Customer c LEFT JOIN Salary s  ON c.Cust_Id = s.Cust_Id
	            LEFT JOIN Penalty p ON p.CustomerId = s.Cust_Id
   Where s.Amount is not NULL and s.Bonus is NULL
         AND p.AmountPenalty IS NULL
         AND c.Status = 'O'
      Go

/*11. Задача про "Алкоголика".
Найти платежи, назначение платежа которых имеет фрагмент слова "алког" (в любом сегменте назначения платежа).
Дебет DebAcc счета этих платежей использовать для поиска/связи счета в таблице счетов Account.
А с таблицы Account сделать связь на клиента-владельца с таблицы Customer.	
Вывести только поле NameUser.*/

  Select * 
    From Account a
      Go

  Select * 
    From Customer c
	  Go

  Select *
    From Payment p
	  Go

  Select c.NameUser
    From Payment p INNER JOIN Account a ON p.DebAcc = a.Account
	           INNER JOIN Customer c ON c.Cust_Id = a.Cust_Id
   Where p.TXT LIKE '%алког%'
      Go
