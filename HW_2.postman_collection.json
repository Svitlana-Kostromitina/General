{
	"info": {
		"_postman_id": "64b3aeef-8f92-42b1-96c4-1c37a9b9d92c",
		"name": "HW_(2)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/first\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Correct type\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let correct_name = jsonData.name;\r",
							"let correct_age = jsonData.age;\r",
							"let correct_salary = jsonData.salary;\r",
							"let family = jsonData.family;\r",
							"let salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Correct name\", function () {\r",
							"    pm.expect(correct_name).to.eql(\"Svetlana\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Correct age\", function () {\r",
							"    pm.expect(correct_age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Correct salary\", function () {\r",
							"    pm.expect(correct_salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct request_name\", function () {\r",
							"     pm.expect(correct_name).to.eql(req_name);\r",
							" });\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Correct request_age\", function () {\r",
							"     pm.expect(correct_age).to.eql(req_age);\r",
							" });\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Correct request_salary\", function () {\r",
							"   pm.expect(String(correct_salary)).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"response_family \", family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Correct request_salary_1_5_year\", function () {\r",
							"     pm.expect(salary_1_5_year).to.eql(req_salary*4);\r",
							" });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = jsonData.age;\r",
							"let resp_salary = String(jsonData.salary);\r",
							"let resp_family = jsonData.family;\r",
							"let resp_dog = jsonData.family.pets.dog;\r",
							"let resp_name_dog = jsonData.family.pets.dog.name;\r",
							"let resp_age_dog = jsonData.family.pets.dog.age;\r",
							"\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct NAME\", function () {\r",
							"     pm.expect(resp_name).to.eql(req_name);\r",
							" });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Correct AGE\", function () {\r",
							"     pm.expect(resp_age).to.eql(req_age);\r",
							" });\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Correct SALARY\", function () {\r",
							"     pm.expect(resp_salary).to.eql(req_salary);\r",
							" });\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"response_family \", resp_family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"NAME_dog\", function () {\r",
							"     pm.expect(resp_dog).to.have.property('name');\r",
							" });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"AGE_dog\", function () {\r",
							"     pm.expect(resp_dog).to.have.property('age');\r",
							" });\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name_Luky\", function () {\r",
							"     pm.expect(resp_name_dog).to.eql('Luky');\r",
							" });\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"AGE_4\", function () {\r",
							"     pm.expect(resp_age_dog).to.eql(4);\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = String(jsonData.age);\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Correct NAME\", function () {\r",
							"     pm.expect(resp_name).to.eql(req_name);\r",
							" });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Correct AGE\", function () {\r",
							"     pm.expect(resp_age).to.eql(req_age);\r",
							" });\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\" salary_request \", req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\" salary_response \", resp_salary);\r",
							"\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\" salary_response_0 \", resp_salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\" salary_response_1 \", resp_salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\" salary_response_2 \",resp_salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.\r",
							"pm.test(\"Correct SALARY_0)\", function () {\r",
							"     pm.expect(String(resp_salary[0])).to.eql(req_salary);\r",
							" });\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Correct SALARY_2)\", function () {\r",
							"     pm.expect(resp_salary[1]).to.eql(String(req_salary*2));\r",
							" });\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Correct SALARY_3)\", function () {\r",
							"     pm.expect(resp_salary[2]).to.eql(String(req_salary*3));\r",
							" });\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name_1');\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age_1');\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary_1');\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set('name_1', 'Svetlana');\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set('age_1', 30);\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary_1', 2000);\r",
							"\r",
							" //21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"   //1 вариант\r",
							" for (let i =0;i < resp_salary.length; i++) {\r",
							"      console.log(resp_salary[i])\r",
							"  }    \r",
							"    //2 вариант\r",
							" for (let i in resp_salary) {\r",
							"      console.log(resp_salary[i])\r",
							"  }   \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Svetlana&age=30&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Svetlana"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let start_salary = jsonData.start_qa_salary;\r",
							"let month_6_salary = jsonData.qa_salary_after_6_months;\r",
							"let month_12_salary = jsonData.qa_salary_after_12_months;\r",
							"let month_18_salary = jsonData['qa_salary_after_1.5_year'];\r",
							"let month_42_salary = jsonData['qa_salary_after_3.5_years'];\r",
							"let person_u_name = jsonData.person.u_name;\r",
							"let person_u_age = jsonData.person.u_age;\r",
							"let salary_5_years = jsonData.person.u_salary_5_years;\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"     pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							" });\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"     pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							" });\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"     pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							" });\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"     pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							" });\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"     pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							" });\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"     pm.expect(jsonData).to.have.property('person');\r",
							" });\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('start_qa_salary = salary', function () {\r",
							"     pm.expect(String(start_salary)).to.eql(req_salary);\r",
							" });\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_6_months = salary*2', function () {\r",
							"     pm.expect(month_6_salary).to.eql(req_salary*2);\r",
							" });\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_12_months = salary*2.7', function () {\r",
							"     pm.expect(month_12_salary).to.eql(req_salary*2.7);\r",
							" });\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_1.5_year = salary*3.3', function () {\r",
							"     pm.expect(month_18_salary).to.eql(req_salary*3.3);\r",
							" });\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_3.5_years = salary*3.8', function () {\r",
							"     pm.expect(month_42_salary).to.eql(req_salary*3.8);\r",
							" });\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person, 1-й элемент u_name = salary\", function () {\r",
							"     pm.expect(String(person_u_name[1])).to.eql(req_salary);\r",
							" });\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age из request\", function () {\r",
							"     pm.expect(String(person_u_age)).to.eql(req_age);\r",
							" });\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('u_salary_5_years = salary*4.2', function () {\r",
							"     pm.expect(salary_5_years).to.eql(req_salary*4.2);\r",
							" });\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" \r",
							" for (let i in jsonData.person) {\r",
							"      console.log(jsonData.person[i]);\r",
							"  }    \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
